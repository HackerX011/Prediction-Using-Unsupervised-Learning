# -*- coding: utf-8 -*-
"""Task 2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-BT1mlC13N2ml9P5Ynr6K4if0UhXHCJq

**Importing Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as mtp
from sklearn.cluster import KMeans

"""**Importing Datase**"""

data=pd.read_csv("/content/Iris.csv")
data

x = data.iloc[:, 1:5].values

x

"""**Finding Optimal Number of Clusters using the Elbow Method :**"""

wcss_list = [] #initializing the list for the values of WCSS

#Using for loop for iterations from 1 to 7.

for i in range(1,8):
  kmeans = KMeans(n_clusters=i,init='k-means++',random_state=42)
  kmeans.fit(x)
  wcss_list.append(kmeans.inertia_)
mtp.plot(range(1,8),wcss_list)
mtp.title('The Elbow Method Graph')
mtp.xlabel('Number of Clusters ( k )')
mtp.ylabel('wcss_list')
mtp.show

"""**Training the K-Means Model on a Dataset**"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
y_predict = kmeans.fit_predict(x)
y_predict #Data Point belonging to which cluster

"""**To Visualise the Clusters will use Scatter Plot using mtp.scatter() function of Matplotlib. Visualizing the Clusters :**"""

mtp.scatter(x[y_predict==0,0],x[y_predict==0,1],s=100,c='blue',label='Cluster_1') #for 1st Cluster

mtp.scatter(x[y_predict==1,0],x[y_predict==1,1],s=100,c='green',label='Cluster_2') #for 2nd Cluster

mtp.scatter(x[y_predict==2,0],x[y_predict==2,1],s=100,c='red',label='Cluster_3') #for 3rd Cluster

mtp.title('Clusters of iris')
mtp.legend()